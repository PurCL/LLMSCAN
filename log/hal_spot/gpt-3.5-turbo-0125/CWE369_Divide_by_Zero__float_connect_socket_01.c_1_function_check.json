{
    "src code": "1  void CWE369_Divide_by_Zero__float_connect_socket_01_hoo()\n2  {\n3      float data;\n4      \n5      data = 0.0F;\n6      {\n7  #ifdef _WIN32\n8          WSADATA wsaData;\n9          int wsaDataInit = 0;\n10  #endif\n11          int recvResult;\n12          struct sockaddr_in service;\n13          SOCKET connectSocket = INVALID_SOCKET;\n14          char inputBuffer[CHAR_ARRAY_SIZE];\n15          do\n16          {\n17  #ifdef _WIN32\n18              if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n19              {\n20                  break;\n21              }\n22              wsaDataInit = 1;\n23  #endif\n24              connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n25              if (connectSocket == INVALID_SOCKET)\n26              {\n27                  break;\n28              }\n29              memset(&service, 0, sizeof(service));\n30              service.sin_family = AF_INET;\n31              service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n32              service.sin_port = htons(TCP_PORT);\n33              if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n34              {\n35                  break;\n36              }\n37              \n38  \n39              \n40              recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n41              if (recvResult == SOCKET_ERROR || recvResult == 0)\n42              {\n43                  break;\n44              }\n45              \n46              inputBuffer[recvResult] = '\\0';\n47              \n48              data = (float)atof(inputBuffer);\n49          }\n50          while (0);\n51          if (connectSocket != INVALID_SOCKET)\n52          {\n53              CLOSE_SOCKET(connectSocket);\n54          }\n55  #ifdef _WIN32\n56          if (wsaDataInit)\n57          {\n58              WSACleanup();\n59          }\n60  #endif\n61      }\n62      {\n63          \n64          int result = (int)(100.0 / data);\n65          printIntLine(result);\n66      }\n67  }",
    "sink code": "1  void CWE369_Divide_by_Zero__float_connect_socket_01_hoo()\n2  {\n3      float data;\n4      \n5      data = 0.0F;\n6      {\n7  #ifdef _WIN32\n8          WSADATA wsaData;\n9          int wsaDataInit = 0;\n10  #endif\n11          int recvResult;\n12          struct sockaddr_in service;\n13          SOCKET connectSocket = INVALID_SOCKET;\n14          char inputBuffer[CHAR_ARRAY_SIZE];\n15          do\n16          {\n17  #ifdef _WIN32\n18              if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n19              {\n20                  break;\n21              }\n22              wsaDataInit = 1;\n23  #endif\n24              connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n25              if (connectSocket == INVALID_SOCKET)\n26              {\n27                  break;\n28              }\n29              memset(&service, 0, sizeof(service));\n30              service.sin_family = AF_INET;\n31              service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n32              service.sin_port = htons(TCP_PORT);\n33              if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n34              {\n35                  break;\n36              }\n37              \n38  \n39              \n40              recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n41              if (recvResult == SOCKET_ERROR || recvResult == 0)\n42              {\n43                  break;\n44              }\n45              \n46              inputBuffer[recvResult] = '\\0';\n47              \n48              data = (float)atof(inputBuffer);\n49          }\n50          while (0);\n51          if (connectSocket != INVALID_SOCKET)\n52          {\n53              CLOSE_SOCKET(connectSocket);\n54          }\n55  #ifdef _WIN32\n56          if (wsaDataInit)\n57          {\n58              WSACleanup();\n59          }\n60  #endif\n61      }\n62      {\n63          \n64          int result = (int)(100.0 / data);\n65          printIntLine(result);\n66      }\n67  }",
    "src response": "Step 1.1: Line 5 assigns a value to a float variable \"data\".\n\nStep 1.2: The value assigned to \"data\" at line 5 is 0.0F, which is a zero value.\n\nTherefore, the line 5 contains a variable or expression of which the value can be zero.\n\nYes",
    "sink response": "Step 1: Line 64 contains the division operator (/).\n\nStep 2: The second operand of the division operator at line 64 is 'data'.\n\nSince there is no explicit check to ensure that 'data' is not equal to zero before performing the division operation at line 64, a divide-by-zero bug may occur if 'data' is zero.\n\nYes",
    "trace": [
        [
            50,
            "data"
        ],
        [
            109,
            "data"
        ]
    ],
    "all program size": 134,
    "is_src": true,
    "is_sink": true,
    "input_token_cost": 0,
    "output_token_cost": 0
}