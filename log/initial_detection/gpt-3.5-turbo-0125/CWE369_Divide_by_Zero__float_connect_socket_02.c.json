{
    "response": {
        "analyzed code": "1  static void fooyy1()\n2  {\n3      float data;\n4      \n5      data = 0.0F;\n6      if(1)\n7      {\n8          {\n9  #ifdef _WIN32\n10              WSADATA wsaData;\n11              int wsaDataInit = 0;\n12  #endif\n13              int recvResult;\n14              struct sockaddr_in service;\n15              SOCKET connectSocket = INVALID_SOCKET;\n16              char inputBuffer[CHAR_ARRAY_SIZE];\n17              do\n18              {\n19  #ifdef _WIN32\n20                  if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n21                  {\n22                      break;\n23                  }\n24                  wsaDataInit = 1;\n25  #endif\n26                  connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n27                  if (connectSocket == INVALID_SOCKET)\n28                  {\n29                      break;\n30                  }\n31                  memset(&service, 0, sizeof(service));\n32                  service.sin_family = AF_INET;\n33                  service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n34                  service.sin_port = htons(TCP_PORT);\n35                  if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n36                  {\n37                      break;\n38                  }\n39                  \n40  \n41                  \n42                  recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n43                  if (recvResult == SOCKET_ERROR || recvResult == 0)\n44                  {\n45                      break;\n46                  }\n47                  \n48                  inputBuffer[recvResult] = '\\0';\n49                  \n50                  data = (float)atof(inputBuffer);\n51              }\n52              while (0);\n53              if (connectSocket != INVALID_SOCKET)\n54              {\n55                  CLOSE_SOCKET(connectSocket);\n56              }\n57  #ifdef _WIN32\n58              if (wsaDataInit)\n59              {\n60                  WSACleanup();\n61              }\n62  #endif\n63          }\n64      }\n65      if(0)\n66      {\n67          \n68          printLine(\"Benign, fixed string\");\n69      }\n70      else\n71      {\n72          \n73          if(fabs(data) > 0.000001)\n74          {\n75              int result = (int)(100.0 / data);\n76              printIntLine(result);\n77          }\n78          else\n79          {\n80              printLine(\"This would result in a divide by zero\");\n81          }\n82      }\n83  }\n84  void CWE369_Divide_by_Zero__float_connect_socket_02_foo()\n85  {\n86      fooyy1();\n87      fooyy2();\n88      fooxx1();\n89      fooxx2();\n90  }\n91  ",
        "response": "",
        "all program size": 96,
        "input_token_cost": 0,
        "output_token_cost": 0
    }
}