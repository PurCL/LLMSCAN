{
  "model_role_name": "DBZ Detector",
    "user_role_name": "DBZ Detector",
    "system_role": "You are a Java programmer and very good at analyzing Java code.",
    "task": "We will provide several Java files with line numbers. Please detect the divide-by-zero (DBZ) bugs according to the following instructions and report them by generating a sequence of propositions over program variables using our specified predicate is_zero.",
    "analysis_rules": [
      "Here are several analysis rules for you.",
      "- Tips to identify the zero values:",
      "  - (Step 1.1) Check whether the program line assigns a value to a numeric variable, such as int, float, and double. If not, the program line does not produces a zero value. Otherwise, go to (Step 1.1).",
      "  - (Step 1.2) Check whether the program line is an assignment from 0, 0.0, and 0.0f. If so, the program line produces a zero value. Otherwise, go to (Step 1.3)",
      "  - (Step 1.3) Check whether the program line is an assignment from Integer.MIN_VALUE, Integer.MAX_VALUE, and other literals (e.g., -1, -1.0, -1.0f, 1, 1.0, 1.0f). If so, the program line does not produce a zero value. Otherwise, go to (Step 1.4)",
      "  - (Step 1.4) Check whether the program line contains an invocation of the functions named parseInt and parseFloat upon input values and assign the return values to a variable. If so, the program line produces a zero value. Otherwise, go to (Step 1.5).",
      "  - (Step 1.5) Check whether the program line contains an invocation of the functions named nextFloat and nextInt upon random number generator SecureRandom and assign the return values to a variable. If so, the program line produces a zero value. Otherwise, the program line does not produce zero value.",

      "- Tips to identify the dangerous use of zero values: ",
      "  - (Step 2.1) Examine whether the program line contains the operators / or %. If not, the program line does not contain dangerous use of zero values. Otherwise, go to (Step 2.2)",
      "  - (Step 2.2) Figure out the second operand of / or % at the program line you found in Step 2.1. If the program checks the operand and ensures it not to be equal to zero at the program line, the program line does not contain dangerous use of zero values. Otherwise, the program can contain dangerous use of zero values at this line.",

      "- Tips to propagate the zero value: The zero value can be propagated by assignments, pointer load/store operations, passing to function parameters, and returned from callees. To identify whether the zero value can be propagated from the line <PRE_LINE_NUMBER> to the line <POST_LINE_NUMBER>, follow the following instructions:",
      "- (Step 3.1) Imagine the value of the variable defined at the line <PRE_LINE_NUMBER> is changed. Try to see whether the the value of an argument/operand/return value at the line <POST_LINE_NUMBER> will change. If not, answer directly answer No. Otherwise, go to Step 3.2.",
      "- (Step 3.2) Collect the path conditions of the lines <PRE_LINE_NUMBER> and <POST_LINE_NUMBER>. Examine whether both the conditions are satisfiable. If not, answer No. Otherwise, go to Step 3.3.",
      "- (Step 3.3) Whether the variable defined at the line <PRE_LINE_NUMBER> and the argument/operand/return value at the line <POST_LINE_NUMBER> are both zero. If so, answer Yes. Otherwise, answer No."
    ],
    "output_constraints": [
      "Your output should be in the following format:",
      "-------------BEGIN REPORT----------------",
      "There is {BUG_NUM} bug(s) in the program:",
      "- Bug {i}, [Explanation, {BUG_EXPLANATION}], [Trace: {BUG_TRACE}]",
      "---------------END REPORT----------------",
      "Here is the description of the above format:",
      "- The first line shows the number of the divide-by-zero bugs in the program, i.e., {BUG_NUM}.",
      "- Starting from the second line, you should list each bug line by line.",
      "   - {i} shows the i-th bug report.",
      "   - {BUG_EXPLANATION} is the natural language explanation of the bug.",
      "   - {BUG_TRACE} is a sequence of pair (Line {LINE_NUMBER}, is_zero({SYMBOL})) separated by comma, which indicates how a zero value is propagated in the program step by step. {LINE_NUMBER} is the line number and {SYMBOL} is the variable name. Particularly, the predicate is_zero indicates that {SYMBOL} is defined or used at the line {LINE_NUMBER} and it may have a zero value.",

      "The trace of a bug is very important. Please remember:",
      "- You are expected to indicate how the the zero value is propagated in detail with a trace you report.",
      "- (1) The first pair in a trace should indicate how a zero value is produced and the last pair should indicate using zero value as divisors of % or /.",
      "- (2) You are expected to include the first line of the function in the Trace part if one of its parameter is zero and the line containing the return statement in the Trace part if the returned value is zero.",
      "- (3) A variable {SYMBOL} appearing in a trace should have a zero value, i.e., is_zero({SYMBOL}) holds at the corresponding line."
    ],
    "analysis_examples": [
      "Here are several examples:",
      "Example 1:",
      "User:",
      "File name: Example1.java",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      int token = 0;",
      "3.      return token;",
      "4.  }",
      "5.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "6.      int t = fun1(request);",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
      "- Bug 1: [Explanation: In the file Example1.java, the value of token at the line 2 is assigned with the literal 0. It is returned by the return statement at line 3 and propagated back to the caller function named fun2 at line 6. The assignment at line 6 make t 0, so the second operand of / operator at line 7 is 0. Hence, there is the divide-by-zero bug at the line 7.], [Trace: (Line 2, is_zero(token)), (Line 3, is_zero(token)), (Line 6, is_zero(t)), (Line 7, is_zero(t))]",
      "---------------END REPORT----------------",
      "",

      "Example 2:",
      "User:",
      "File name: Example2.java",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      double p = 0.0;",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public void fun2(double property, HttpServletResponse response) {",
      "6.      double t = property;",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
      "- Bug 1: [Explanation: In the file Example2.java, the value of p at the line 3 is assigned with the literal 0.0, and then used as the first argument of the function fun2 at line 3, which makes the first parameter at line 5, named property, equal to 0.0 in the function fun2. The parameter property further initializes the value of t at line 6, making it equal to 0.0. Finally, the value of t is used as the divisor at line 7, which cause a divide-by-zero bug at line 7.], [Trace: (Line 2, is_zero(p)), (Line 3, is_zero(p)), (Line 5, is_zero(property)), (Line 6, is_zero(t)), (Line 7, is_zero(t))]",
      "---------------END REPORT----------------",
      "",

      "Example 3:",
      "User:",
      "File name: Example3.java",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      float token = 0.0f;",
      "3.      fun2(token, response);",
      "4.  }",
      "5.  public void fun2(double property, HttpServletResponse response) {",
      "6.      float t = property;",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
      "- Bug 1: [Explanation: In the file Example3.java, the value of token at the line 2 is assigned with the literal 0.0f, and then used as the first argument of the function fun2 at line 3, which makes the first parameter at line 5, named property, equal to 0.0f in the function fun2. The parameter property further initializes the value of t at line 6, making it equal to 0.0f. Finally, the value of t is used as the divisor at line 7, which cause a divide-by-zero bug at line 7.], [Trace: (Line 2, is_zero(token)), (Line 3, is_zero(token)), (Line 5, is_zero(property)), (Line 6, is_zero(t)), (Line 7, is_zero(t))]",
      "---------------END REPORT----------------",
      "",

      "Example 4:",
      "User:",
      "File name: Example4.java",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      String stringNumber = System.getenv(\"ADD\");",
      "3.      int token = Integer.parseInt(stringNumber.trim());",
      "4.      return token;",
      "5.  }",
      "6.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "7.      int t = fun1(request);",
      "8.      response.getWriter().println(10 % t);",
      "9.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
      "- Bug 1: [Explanation: In the file Example4.java, the value of token at the line 3 is produced by the return value of parseInt over a system environment variable, which can be 0. It is returned by the return statement at line 4 and propagated back to the caller function named fun2 at line 7. The assignment at line 7 make t 0, so the second operand of % operator at line 8 is 0. Hence, there is the divide-by-zero bug at the line 8.], [Trace: (Line 3, is_zero(token)), (Line 4, is_zero(token)), (Line 7, is_zero(t)), (Line 8, is_zero(t))]",
      "---------------END REPORT----------------",

      "Example 5:",
      "User:",
      "File name: Example5.java",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      String input = request.getInput()",
      "3.      int p = Integer.parseFloat(input.trim());",
      "4.      fun2(p, response);",
      "5.  }",
      "6.  public void fun2(float property, HttpServletResponse response) {",
      "7.      float t = property;",
      "8.      response.getWriter().println(10 / t);",
      "9.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
      "- Bug 1: [Explanation: In the file Example5.java, the value of p at the line 3 is produced by the return value of parseFloat, so it may be 0.0f. The value of p is then used as the first argument of the function fun2 at line 4, making the parameter named property equal to 0.0 at Line 6. In the function fun2, the parameter property initializes the value of t at line 7, making it equal to 0.0. Finally, the value of t is used as the divisor at line 8, which cause a divide-by-zero bug at line 8.], [Trace: (Line 3, is_zero(p)), (Line 4, is_zero(p)), (Line 6, is_zero(property)), (Line 7, is_zero(t)), (Line 8, is_zero(t))]",
      "---------------END REPORT----------------",
      "",

      "Example 6:",
      "User:",
      "File name: Example6.java",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      String p = fun0(request);",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public String fun0(HttpServletRequest request) {",
      "6.      float para = (new SecureRandom()).nextFloat();",
      "7.      return para;",
      "8.  }",
      "9.  public void fun2(float property, HttpServletResponse response) {",
      "10.      float t = property;",
      "11.      response.getWriter().println(10 / t);",
      "12.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
        "- Bug 1: [Explanation: In the file Example6.java, the value of para at the line 6 is produced by the return value of nextFloat, so it can be equal to 0.0f. The value of para is then returned by the return statement at line 7 and propagated back to the caller function fun1, making the value of p at line 2 equal to 0.0f. The value of p is further used as the first argument of the function fun2 at line 3, making the parameter named property equal to 0.0f. In the function fun2, the parameter property initializes the value of t at line 10, making it equal to 0.0f. Finally, the value of t is used as the divisor at line 11, which cause a divide-by-zero bug at line 11.], [Trace: (Line 6, is_zero(para)), (Line 7, is_zero(para)), (Line 2, is_zero(p)), (Line 3, is_zero(p)), (Line 9, is_zero(property)), (Line 10, is_zero(t)), (Line 11, is_zero(t))]",
      "---------------END REPORT----------------",
      "",

      "Example 7:",
      "User:",
      "File name: Example7.java",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      int p = fun0(request);",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public int fun0(HttpServletRequest request) {",
      "6.      SecureRandom random = new SecureRandom();",
      "7.      int para = random.nextInt();",
      "8.      return para;",
      "9.  }",
      "10.  public void fun2(int property, HttpServletResponse response) {",
      "11.      int t = property;",
      "12.      response.getWriter().println(10 % t);",
      "13.  }",
      "```",
      "Please detect the divide-by-zero bugs in the program step by step.",
      "System:",
      "-------------BEGIN REPORT----------------",
      "There is 1 divide-by-zero bug in the program:",
      "- Bug 1: [Explanation: In the file Example7.java, the value of para at the line 7 is produced by the return value of nextInt, so it may be equal to 0. The value of para is then returned by the return statement at line 8 and propagated back to the caller function fun1, making the value of p at line 2 0. The value of p is further used as the first argument of the function fun2 at line 3, which makes the first parameter of fun2, i.e., property, 0. In the function fun2, the parameter named property initializes the value of t at line 11, making it 0. Finally, the value of t is used as the second operand of % at line 12, which may cause a divide-by-zero bug at line 12.], [Trace: (Line 7, is_zero(para)), (Line 8, is_zero(para)), (Line 2, is_zero(p)), (Line 3, is_zero(p)), (Line 10, is_zero(property)), (Line 11, is_zero(t)), (Line 12, is_zero(t))]",
      "---------------END REPORT----------------",
      ""
    ],
    "re_emphasize_rules": [
      "- Tips to identify the zero values:",
      "  - (Step 1.1) Check whether the program line assigns a value to a numeric variable, such as int, float, and double. If not, the program line does not produces a zero value. Otherwise, go to (Step 1.1).",
      "  - (Step 1.2) Check whether the program line is an assignment from 0, 0.0, and 0.0f. If so, the program line produces a zero value. Otherwise, go to (Step 1.3)",
      "  - (Step 1.3) Check whether the program line is an assignment from Integer.MIN_VALUE, Integer.MAX_VALUE, and other literals (e.g., -1, -1.0, -1.0f, 1, 1.0, 1.0f). If so, the program line does not produce a zero value. Otherwise, go to (Step 1.4)",
      "  - (Step 1.4) Check whether the program line contains an invocation of the functions named parseInt and parseFloat upon input values and assign the return values to a variable. If so, the program line produces a zero value. Otherwise, go to (Step 1.5).",
      "  - (Step 1.5) Check whether the program line contains an invocation of the functions named nextFloat and nextInt upon random number generator SecureRandom and assign the return values to a variable. If so, the program line produces a zero value. Otherwise, the program line does not produce zero value.",

      "- Tips to identify the dangerous use of zero values: ",
      "  - (Step 2.1) Examine whether the program line contains the operators / or %. If not, the program line does not contain dangerous use of zero values. Otherwise, go to (Step 2.2)",
      "  - (Step 2.2) Figure out the second operand of / or % at the program line you found in Step 2.1. If the program checks the operand and ensures it not to be equal to zero at the program line, the program line does not contain dangerous use of zero values. Otherwise, the program can contain dangerous use of zero values at this line.",

      "- Tips to propagate the zero value: The zero value can be propagated by assignments, pointer load/store operations, passing to function parameters, and returned from callees. To identify whether the zero value can be propagated from the line <PRE_LINE_NUMBER> to the line <POST_LINE_NUMBER>, follow the following instructions:",
      "- (Step 3.1) Imagine the value of the variable defined at the line <PRE_LINE_NUMBER> is changed. Try to see whether the the value of an argument/operand/return value at the line <POST_LINE_NUMBER> will change. If not, answer directly answer No. Otherwise, go to Step 3.2.",
      "- (Step 3.2) Collect the path conditions of the lines <PRE_LINE_NUMBER> and <POST_LINE_NUMBER>. Examine whether both the conditions are satisfiable. If not, answer No. Otherwise, go to Step 3.3.",
      "- (Step 3.3) Whether the variable defined at the line <PRE_LINE_NUMBER> and the argument/operand/return value at the line <POST_LINE_NUMBER> are both zero. If so, answer Yes. Otherwise, answer No."
    ],
    "meta_prompts_without_reflection": [
      "Now I will give you the program as follows: \n <PROGRAM> \n",
      "Please detect all the divide-by-zero bugs in it by reasoning the program step by step.",
      "I want to re-emphasize the following rules, which have been demonstrated above with examples. Please follow them: \n <RE_EMPHASIZE_RULE> \n",
      "Please report the bugs with the explanations and traces in the above formats. The first line of your report should be \"-------------BEGIN REPORT----------------\" and the last line should \"---------------END REPORT----------------\". Between the two lines, you should report the bug number at the beginning with a single line in the format \"There is {BUG_NUM} bug(s) in the program:\". Then you should report each bug in the format \"- Bug {i}, [Explanation, {BUG_EXPLANATION}], [Trace: {BUG_TRACE}]\". Make sure that the traces should be as long as possible.\n",
      "Please analyze the code right now. It is very urgent! Don't output the sentence like\"I will analyze the provided Java files and detect the divide-by-zero bugs according to the given instructions. I will then report the bugs with explanations and traces in the specified format. Let me start the analysis.\". Just give me the report in this round. Also, please try your best to identify the bugs AS MANY AS POSSIBLE."
    ],


    "source_examples": [
      "Here are several examples:",
      "Example 1:",
      "User:",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      int token = 0;",
      "3.      return token;",
      "4.  }",
      "5.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "6.      int t = fun1(request);",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please check whether the line 2 contains a variable or expression with zero value.",
      "System:",
      "Yes. A zero int literal is assigned to the variable token at line 2. Hence, the answer should be yes.",
      "",

      "Example 2:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      double data = 0.0;",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public void fun2(double property, HttpServletResponse response) {",
      "6.      double t = property;",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please check whether the line 2 contains a variable or expression with zero value.",
      "System:",
      "Yes. 0.0 is assigned to the variable data at line 2. Hence, the answer should be yes.",
      "",

      "Example 3:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      float data = 0.0f;",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public void fun2(double property, HttpServletResponse response) {",
      "6.      float t = property;",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please check whether the line 2 contains a variable or expression with zero value.",
      "System:",
      "Yes. 0.0f is assigned to the variable data at line 2. Hence, the answer should be yes.",
      "",

      "Example 4:",
      "User:",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      String input = request.getInput()",
      "3.      int token = Integer.parseInt(input.trim());",
      "4.      return token;",
      "5.  }",
      "6.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "7.      int t = fun1(request);",
      "8.      response.getWriter().println(10 % t);",
      "9.  }",
      "```",
      "Please check whether the line 3 contains a variable or expression with zero value.",
      "System:",
      "Yes. At the line 3, the function parseInt takes an external input as its argument and its return value is assigned to the variable token. Hence, token may be equal to 0. The answer should be yes.",
      "",


      "Example 5:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      String input = request.getInput()",
      "3.      int p = Integer.parseFloat(input.trim());",
      "4.      fun2(p, response);",
      "5.  }",
      "6.  public void fun2(float property, HttpServletResponse response) {",
      "7.      float t = property;",
      "8.      response.getWriter().println(10 / t);",
      "9.  }",
      "```",
      "Please check whether the line 3 contains a variable or expression with zero value.",
      "System:",
      "Yes. At the line 3, the function parseFloat takes an external input as its argument and its return value is assigned to the variable p. Hence, p may be equal to 0.0. The answer should be yes.",
      "",

      "Example 6:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      String p = fun0(request);",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public String fun0(HttpServletRequest request) {",
      "6.      float para = (new SecureRandom()).nextFloat();",
      "7.      return para;",
      "8.  }",
      "9.  public void fun2(float property, HttpServletResponse response) {",
      "10.      float t = property;",
      "11.      response.getWriter().println(10 / t);",
      "12.  }",
      "```",
      "Please check whether the line 6 contains a variable or expression with zero value.",
      "System:",
      "Yes. At the line 6, A randomly generated value is returned by nextFloat and assigned to the variable para. Hence, para may be equal to 0.0. The answer should be yes.",
      "",

      "Example 7:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      int p = fun0(request);",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public int fun0(HttpServletRequest request) {",
      "6.      SecureRandom random = new SecureRandom();",
      "7.      int para = random.nextToken();",
      "8.      return para;",
      "9.  }",
      "10 .  public void fun2(int property, HttpServletResponse response) {",
      "11.      int t = property;",
      "12.      response.getWriter().println(10 % t);",
      "13.  }",
      "```",
      "Please check whether the line 7 contains a variable or expression with zero value.",
      "System:",
      "Yes. At the line 7, A randomly generated value is returned by nextToken and assigned to the variable para. Hence, para may be equal to 0. The answer should be yes.",
      ""
    ],
    "meta_prompts_in_function_src_check": [
      "You are require to check whether a given function contains a variable or expression of which the value can be zero.",
      "To help you understand how zero value is produced, we provide several examples.\n <SRC_EXAMPLES>",
      "Now I will give you a program with line numbers as follows: \n ```\n<SRC_PROGRAM>\n```\n",
      "Please check whether the line <SRC_LINE_NUMBER> contains a variable or expression of which the value can be zero.",
      "You can follow the following steps to answer the problem: ",
      "  - (Step 1.1) Check whether the line <SRC_LINE_NUMBER> assigns a value to a numeric variable, such as int, float, and double. If not, the line <SRC_LINE_NUMBER> does not produces a zero value. Otherwise, go to (Step 1.1).",
      "  - (Step 1.2) Check whether the line <SRC_LINE_NUMBER> is an assignment from 0, 0.0, and 0.0f. If so, the line <SRC_LINE_NUMBER> produces a zero value. Otherwise, go to (Step 1.3)",
      "  - (Step 1.3) Check whether the line <SRC_LINE_NUMBER> is an assignment from Integer.MIN_VALUE, Integer.MAX_VALUE, and other literals (e.g., -1, -1.0, -1.0f, 1, 1.0, 1.0f). If so, the line <SRC_LINE_NUMBER> does not produce a zero value. Otherwise, go to (Step 1.4)",
      "  - (Step 1.4) Check whether the line <SRC_LINE_NUMBER> contains an invocation of the functions named parseInt and parseFloat upon input values and assign the return values to a variable. If so, the line <SRC_LINE_NUMBER> produces a zero value. Otherwise, go to (Step 1.5).",
      "  - (Step 1.5) Check whether the line <SRC_LINE_NUMBER> contains an invocation of the functions named nextFloat and nextInt upon random number generator SecureRandom and assign the return values to a variable. If so, the line <SRC_LINE_NUMBER> produces a zero value. Otherwise, the line <SRC_LINE_NUMBER> does not produce zero value.",

      "Please think step by step and answer Yes or No. If you are not sure about your answer, you can answer Yes.",
      "In your output, you can provide your reasoning process in several lines and finally output Yes or No at the last line separately."
    ],

    "sink_examples": [
      "Here are several examples:",
      "Example 1:",
      "User:",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      int token = 0;",
      "3.      return token;",
      "4.  }",
      "5.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "6.      int t = fun1(request);",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please check whether the line 7 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 7, it is used as the second operand of / operator. Thus, a divide-by-zero bug may occur.",
      "",

      "Example 2:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      double data = 0.0;",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public void fun2(double property, HttpServletResponse response) {",
      "6.      double t = property;",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please check whether the line 7 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 7, it is used as the second operand of / operator. Thus, a divide-by-zero bug may occur.",
      "",

      "Example 3:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      float data = 0.0f;",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public void fun2(double property, HttpServletResponse response) {",
      "6.      float t = property;",
      "7.      response.getWriter().println(10 / t);",
      "8.  }",
      "```",
      "Please check whether the line 7 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 7, it is used as the second operand of / operator. Thus, a divide-by-zero bug may occur.",
      "",

      "Example 4:",
      "User:",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      String input = request.getInput()",
      "3.      int token = Integer.parseInt(input.trim());",
      "4.      return token;",
      "5.  }",
      "6.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "7.      int t = fun1(request);",
      "8.      response.getWriter().println(10 % t);",
      "9.  }",
      "```",
      "Please check whether the line 8 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 8, it is used as the second operand of % operator. Thus, a divide-by-zero bug may occur.",
      "",


      "Example 5:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      String input = request.getInput()",
      "3.      int p = Integer.parseFloat(input.trim());",
      "4.      fun2(p, response);",
      "5.  }",
      "6.  public void fun2(float property, HttpServletResponse response) {",
      "7.      float t = property;",
      "8.      response.getWriter().println(10 / t);",
      "9.  }",
      "```",
      "Please check whether the line 8 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 8, it is used as the second operand of / operator. Thus, a divide-by-zero bug may occur.",
      "",

      "Example 6:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      String p = fun0(request);",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public String fun0(HttpServletRequest request) {",
      "6.      float para = (new SecureRandom()).nextFloat();",
      "7.      return para;",
      "8.  }",
      "9.  public void fun2(float property, HttpServletResponse response) {",
      "10.      float t = property;",
      "11.      response.getWriter().println(10 % t);",
      "12.  }",
      "```",
      "Please check whether the line 11 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 11, it is used as the second operand of % operator. Thus, a divide-by-zero bug may occur.",
      "",

      "Example 7:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response) {",
      "2.      int p = fun0(request);",
      "3.      fun2(p, response);",
      "4.  }",
      "5.  public int fun0(HttpServletRequest request) {",
      "6.      SecureRandom random = new SecureRandom();",
      "7.      int para = random.nextToken();",
      "8.      return para;",
      "9.  }",
      "10 .  public void fun2(int property, HttpServletResponse response) {",
      "11.      int t = property;",
      "12.      response.getWriter().println(10 % t);",
      "13.  }",
      "```",
      "Please check whether the line 12 contains a divide-by-zero bug if one of the variables or expressions has a zero value.",
      "System:",
      "Yes. If t is equal to 0 at the line 12, it is used as the second operand of % operator. Thus, a divide-by-zero bug may occur.",
      ""
    ],
    "meta_prompts_in_function_sink_check": [
      "You are required to check whether a given program line contains a divide-by-zero bug if one of the variables or expressions at this line has a zero value.",
      "To help you understand how a divide-by-zero bug occurs, we provide several examples.\n <SINK_EXAMPLES>",
      "Now I will give you a program with line numbers as follows: \n ```\n<SINK_PROGRAM>\n```\n",
      "Please check whether the line <SINK_LINE_NUMBER> may cause divide-by-zero bug if one of the variables or expressions at this line has a zero value.",
      "You can follow the following steps to answer the problem: ",
      "- (Step 1) Examine whether the line <SINK_LINE_NUMBER> contains the division or modulo operators, i.e., / or %. If not, you should answer No directly. Otherwise, go to (Step 2)",
      "- (Step 2) Figure out the second operand of / or % at the line <SINK_LINE_NUMBER> you found in Step 1. If the program checks the operand and ensures it not to be equal to zero at the line <SINK_LINE_NUMBER>, please answer No. Otherwise, answer Yes",
      "Please think step by step and answer Yes or No. If you are not sure about your answer, you can answer Yes.",
      "In your output, you can provide your reasoning process in several lines and finally output Yes or No at the last line separately."
    ],


    "intra_data_flow_examples": [
      "Here are several examples:",
      "Example 1:",
      "User:",
      "```",
      "1.  public int fun1(HttpServletRequest request) {",
      "2.      ReaderBuffer readerBuffer = new ReaderBuffer();",
      "3.      int token = parseInt(readerBuffer.readLine());",
      "4.      return token;",
      "5.  }",
      "6.  public void fun2(HttpServletRequest request, HttpServletResponse response) {",
      "7.      int t = fun1(request);",
      "8.      System.out.println(12 / t);",
      "9.  }",
      "```",
      "Please check whether the variable token at line 3 can affect the value of token at line 4.",
      "System:",
      "Yes. The variable token is directly used at line 4 after it is defined at the line 3. The zero value of token at line 3 can make the variable named t at line 7 equal to zero, which is further used at line 8. Hence, the value of token at line 3 affects the value of token at line 8.",
      "",

      "Example 2:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response, int x) {",
      "2.      ResultSet resultSet = executeQuery();",
      "3.      int p = 0;",
      "4.      fun2(p, response);",
      "5.  }",
      "6.  public void fun2(int property, HttpServletResponse response) {",
      "7.      int t = property;",
      "8.      System.println(10 / t);",
      "9.  }",
      "```",
      "Please check whether the variable p at line 3 and the t at line 8 have the same value.",
      "System:",
      "Yes. property is initialized with a zero literal and then passed as the first argument of the invocation uf function fun2. Hence, the second operands of / at line 8 has the same value of the initialized value of p",
      "",

      "Example 3:",
      "User:",
      "```",
      "1.  public void fun1(HttpServletRequest request, HttpServletResponse response, int x) {",
      "2.      ResultSet resultSet = executeQuery();",
      "3.      int p = 0.0;",
      "4.      fun2(p, response);",
      "5.  }",
      "6.  public void fun2(int property, HttpServletResponse response) {",
      "7.      int t = property;",
      "8.      System.println(10 / t);",
      "9.  }",
      "```",
      "Please check whether the value of the variable t at line 8 has the same value as the value of t at line 8.",
      "System:",
      "Yes. property is initialized with a zero literal and then passed as the first argument of the invocation uf function fun2. Hence, the second operands of / at line 8 has the same value of the initialized value of p",
      ""
    ],
    "meta_prompts_in_intra_data_flow_check": [
      "You are required to check whether the value of a variable defined at a given line and the value of an argument/operand/return value in the latter line have the same value",
      "To help you understand how two program variables have the same value, we provide several examples.\n <INTRA_DATA_FLOW_EXAMPLES>",
      "Now I will give you a program with line numbers as follows: \n ```\n<FUNCTION>\n```\n",
      "Please check whether the value of a variable defined at the line <PRE_LINE_NUMBER> in the function <FUNCTION_NAME> and the value of an argument/operand/return value at the line <POST_LINE_NUMBER> in the function <FUNCTION_NAME> are equal",
      "You can follow the following steps to answer the problem: ",
      "- (Step 1) Check whether the variable/expression <PRE_SYMBOL> appears in `<PRE_LINE_STR>` and the variable/expression <POST_SYMBOL> appears in `<POST_LINE_STR>`. If one of them does not hold, answer No directly. Otherwise, go to Step 2.",
      "- (Step 2) Whether <PRE_SYMBOL> at the line <PRE_LINE_NUMBER> and <POST_SYMBOL> before the line <POST_LINE_NUMBER> have the same value. If so, answer Yes. Otherwise, answer No.",
      "Please think step by step and answer Yes or No. If you are not sure about your answer, you can answer Yes.",
      "In your output, you can provide your reasoning process in several lines and finally output Yes or No at the last line separately."
    ],

    "meta_prompts_in_escape_check": [
      "You are require to check whether a variable defined by a specific statement will escape from the scope of current function, i.e., whether it is (1) passed as the argument of a function call in the current function, or (2) returned as the return value of the current function, or (3) used to overwrite a value of a global variable or a field in the current class.",
      "Now I will give you a program with line numbers as follows: \n ```\n<FUNCTION>\n```\n",
      "Please check whether the variable defined at the line <LINE_NUMBER> will escape from the function <FUNCTION> after the line <LINE_NUMBER>. Please think step by step.",
      "You should give yes or no only in the first line of your answer. In the second line, you can give your explanation if any."
    ],

    "meta_prompts_with_verification_direct_ask": [
      "Now I will give you the program as follows, which may contain multiple files:\n <PROGRAM> \n",
      "Here is your bug trace revealing a potential bug: \n <BUG_TRACE> \n",
      "Here is the meaning of the bug trace:",
      " - A bug trace is a sequence of pair ({LINE_NUMBER}, {SYMBOL}) separated by comma, which indicates how zero data is propagated in the program step by step. {LINE_NUMBER} is the line number and {SYMBOL} is the variable name or an expression. Particularly, each pair indicates that {SYMBOL} is defined or used at the line {LINE_NUMBER} and its value can be zero.",
      " - The first pair in a trace should indicate how zero value is produced and the last pair should indicate that the zero value is used as the second operand of / or %.",
      "Now please examine the trace <BUG_TRACE> and rethink the problem to verify whether the bug trace is consistent with program facts at corresponding lines and indicates a true bug or not.\n",
      "I want to re-emphasize the following rules, which have been demonstrated above with examples. Please follow them: \n <RE_EMPHASIZE_RULE> \n",
      "Please directly answer Yes or No without any explanation.",
      "Here is an example:",
      "Example answer 1",
      "System: Yes.",
      "Example answer 2",
      "System: No."
    ],

    "meta_prompts_with_verification_step_by_step": [
      "Now I will give you the program as follows, which may contain multiple files:\n <PROGRAM> \n",
      "Here is your bug trace revealing a potential bug: \n <BUG_TRACE> \n",
      "Here is the meaning of the bug trace:",
      " - A bug trace is a sequence of pair ({LINE_NUMBER}, {SYMBOL}) separated by comma, which indicates how zero data is propagated in the program step by step. {LINE_NUMBER} is the line number and {SYMBOL} is the variable name or an expression. Particularly, each pair indicates that {SYMBOL} is defined or used at the line {LINE_NUMBER} and its value can be zero.",
      " - The first pair in a trace should indicate how zero value is produced and the last pair should indicate that the zero value is used as the second operand of / or %.",
      "Now please examine the trace <BUG_TRACE> and rethink the problem to verify whether the bug trace is consistent with program facts at corresponding lines and indicates a true bug or not.\n",
      "I want to re-emphasize the following rules, which have been demonstrated above with examples. Please follow them: \n <RE_EMPHASIZE_RULE> \n",
      "In your answer, first show your reasoning in a step-by-step fashion. Then conclude with Yes or No at the last line.",
      "Here is an example:",
      "Example answer 1",
      "System: Here is an explanation. <EXPLANATION>.",
      "The final answer is Yes.",
      "Example answer 2",
      "System: Here is an explanation. <EXPLANATION>.",
      "The final answer is No."
    ]
}